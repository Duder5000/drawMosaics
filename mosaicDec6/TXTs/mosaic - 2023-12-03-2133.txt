// Allow zoom in to see tiles
// Select own target image (upload own or have 3 to choose from via UI)
// Send email before Monday to setup presenation Zoom meeting (between 10 - 12)

//Stanford Dogs Image Dataset
//http://vision.stanford.edu/aditya86/ImageNetDogs/

PImage myImg;
PImage smaller;
PImage[] allImages;
float[] brightness;
PImage[] brightImages;

color[] colours;
PImage[] colourImgs;

int scl = 8;
int w, h;
int imgsToUse = 200;
float scaleFactor = 1.0;
boolean setupComplete = false;
boolean fileSelectedFlag = false;

void drawBrightness(){
  smaller.loadPixels();
  for (int x =0; x < w; x++) {
    for (int y = 0; y < h; y++) {
      int index = x + y * w;
      color c = smaller.pixels[index];
      int imageIndex = int(brightness(c));      
      image(brightImages[imageIndex], x*scl, y*scl, scl, scl);
    }
  }
}

//void drawColours() {
//  smaller.loadPixels();
//  for (int x = 0; x < w; x++) {
//    for (int y = 0; y < h; y++) {      
//      int index = x + y * w;
//      color c = smaller.pixels[index];
      
//      //println(red(c) + "," + green(c) + "," + blue(c));
      
//      for(color cTemp : colours){
//        int closestIndex = 0;
//        int alpha = -1;
        
//          float closestDist = Float.MAX_VALUE;        
//          for (int i = 0; i < colours.length; i++) {
//            float d = distSquared(cTemp, colours[i]);        
//            if (d < closestDist) {
//              closestDist = d;
//              closestIndex = i;
//              colourImgs[alpha] = allImages[i];
//            }
//          }          
//      }      
//    }
//  }
//}

//color getAvgColour(PImage img){
//  float totalRed = 0;
//  float totalGreen = 0;
//  float totalBlue = 0;
//  int numPixels = 0;
  
//  img.loadPixels();
//  for (int y = 0; y < img.height; y++) {
//    for (int x = 0; x < img.width; x++) {
//      int loc = x + y * img.width;
//      color c = img.pixels[loc];
//      totalRed += red(c);
//      totalGreen += green(c);
//      totalBlue += blue(c);
//      numPixels++;
//    }
//  }
  
//  img.updatePixels();

//  float avgRed = totalRed / numPixels;
//  float avgGreen = totalGreen / numPixels;
//  float avgBlue = totalBlue / numPixels;

//  return color(avgRed, avgGreen, avgBlue); 
//}

float distSquared(color c1, color c2) {
  float r1 = red(c1);
  float g1 = green(c1);
  float b1 = blue(c1);

  float r2 = red(c2);
  float g2 = green(c2);
  float b2 = blue(c2);

  float dr = r1 - r2;
  float dg = g1 - g2;
  float db = b1 - b2;

  return dr * dr + dg * dg + db * db;
}

//void mouseWheel(MouseEvent event) {
//  float delta = event.getCount();
//  scaleFactor -= delta * 0.1; // Adjust the scaling speed as needed
//  scaleFactor = constrain(scaleFactor, 0.5, 5); // Limit the zoom range if desired
//}

void fileSelected(File selection) {
  if (selection == null) {
    println("Window was closed or the user hit cancel.");
  } else {
    println("User selected " + selection.getAbsolutePath());
    myImg = loadImage(selection.getAbsolutePath());
    fileSelectedFlag = true;
  }
}

File[] listFiles(String dir) {
  File file = new File(dir);
  if (file.isDirectory()) {
    File[] files = file.listFiles();
    return files;
  } else {
    return null;
  }
}

void allowingMeToPauseSetupSortOf(){
  File[] files = listFiles(sketchPath("data/photos"));
  allImages = new PImage[imgsToUse];
  
  brightness = new float[allImages.length];
  brightImages = new PImage[256];
  
  //Colour Testing
  colours = new color[allImages.length];
  colourImgs = new PImage[256];

  for (int i = 0; i < allImages.length; i++) {
    String filename = files[i].toString();

    PImage img = loadImage(filename);

    allImages[i] = createImage(scl, scl, RGB);
    allImages[i].copy(img, 0, 0, img.width, img.height, 0, 0, scl, scl);
    allImages[i].loadPixels();

    float avg = 0;
    for (int j = 0; j < allImages[i].pixels.length; j++) {
      float b =  brightness(allImages[i].pixels[j]);
      avg += b;
    }
    avg /= allImages[i].pixels.length;

    brightness[i] = avg;
    
    //Colour Testing
    //colours[i] = getAvgColour(img);
  }

  // Find the closest image for each brightness value
  for (int i = 0; i < brightImages.length; i++) {
    float record = 256;
    for (int j = 0; j < brightness.length; j++) {
      float diff = abs(i - brightness[j]);
      if (diff < record) {
        record = diff;
        brightImages[i] = allImages[j];
      }
    }
  }

  w = myImg.width/scl;
  h = myImg.height/scl;

  smaller = createImage(w, h, RGB);
  smaller.copy(myImg, 0, 0, myImg.width, myImg.height, 0, 0, w, h);
  
  setupComplete = true;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~

void setup() {
  selectInput("Select an image file:", "fileSelected");
  size(500, 750);
  
  //myImg = loadImage("obama.jpg");
  //allowingMeToPauseSetupSortOf();
  //fileSelectedFlag = true;
  
}

void draw() {
  background(0);
  if(setupComplete){
    drawBrightness();  
    //drawColours();
  }else if(fileSelectedFlag){
    allowingMeToPauseSetupSortOf();
  }
}
